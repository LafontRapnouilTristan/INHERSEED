---
title: "Greenhouse experiment - WP1&2"
format: html
editor: visual
---

```{r set}
#| message: false
#| include: false
library(tidyverse)
library(rtry)
```

# G0

Seeds from XX species were bought from different seed producers. Here is a table listing seed species and origin: [INSERT TABLE]()

We compiled as much information as possible regarding these species and their seeds. First we looked in the TRY database for available information on these species [REF TRY SECTION](). Additionally, we performed multiple test and measurements on these seeds: \* Macroscopy and measurements using TRAITOR (REF) [REF MACROSCOPE/TRAITOR SECTION]() \* Tomography \* Picnometry \* Mass measurements \* Chemistry

### TRY

First we identified a set of traits that may be found on the [TRY database](https://www.try-db.org/) [@kattge2019]. TRY requires manual requests and we used R to prepare our requests.

#### Request

First check if our species have entries in TRY. Run this only the first time to get the list of TRY species:

```{r}
#| message: false
# download.file('https://try-db.org/dnld/TryAccSpecies.txt', destfile = "data/TRY/TryAccSpecies.tsv", method = "wget", extra = "-r -p --random-wait", quiet = T)
```

Then look for our species:

```{r}
#| message: false
#get our species list
species_list <- readr::read_tsv("data/species_list_INHERSEED.tsv")
#check overlap and merge
try_sp <- species_list %>%
  rename(scientific_cleaned = species_for_tree)%>%
  select(scientific_cleaned) %>%
  mutate(scientific_cleaned=ifelse(scientific_cleaned=="Legousia veneris","Legousia speculum-veneris",scientific_cleaned))%>% #rename that species properly
  na.omit() %>%
  unique() %>%
  left_join(readr::read_tsv("data/TRY/TryAccSpecies.txt"),
            by = c("scientific_cleaned" = "AccSpeciesName")
  )
```

```{r}
#| label: fig-speciesinTRY
#| fig-cap: "Number of our species with values for selected traits in TRY."
try_sp%>%
  mutate(is_in_try=ifelse(is.na(AccSpeciesID),"Not in TRY","In Try"))%>%
  ggplot(aes(x=is_in_try,fill=is_in_try))+
  geom_bar(stat = "count")+
  theme_minimal()+
  ylab("Number of species")+
  xlab("")+
  theme(legend.position = "none",
        text = element_text(face="bold"))+
  ggtitle(paste0(sum(!is.na(try_sp$AccSpeciesID))," species out of ", nrow(try_sp)," are in TRY"))
```

Now we can build a request for TRY with our traits of interest. We handpicked from TRY traits list XX traits that were relevant to us.

```{r}
try_request <- try_sp%>%
  filter(!is.na(AccSpeciesID))%>%
  summarise(species_list=paste0(AccSpeciesID,collapse = ", "))
try_request%>%
  readr::write_tsv("data/TRY/requests/TryReqSpecies.tsv")

traits_try <- readxl::read_xlsx("data/TRY/traits_of_interest/Traits repro TRY database.xlsx")
try_request_traits <- traits_try%>%
  filter(tokeep=="y")%>%
  select(TraitID)%>%
  summarise(traits_list=paste0(TraitID,collapse = ", "))
try_request_traits%>%
  readr::write_tsv("data/TRY/requests/TryReqTraits.tsv")
# 41259 - ID of the first request
```

We requested TRY data access using our species and traits lists.

#### Release

Check for all the traits the number of value (e.g., species) we have.

```{r}
#| message: false
#| warning: false
try_release <- readr::read_tsv("data/TRY/release/41259_1905202519280_TRY_relaease/41259.txt")
try_release %<>%
  select(AccSpeciesName, TraitName, StdValue) %>%
  rename(
    species = AccSpeciesName,
    trait = TraitName,
    value = StdValue
  ) %>%
  group_by(species, trait) %>%
  summarise(value = mean(as.numeric(value), na.rm = TRUE)) %>%
  tidyr::pivot_wider(values_from = "value", names_from = "trait")%>%
  mutate(across(everything(),~ifelse(.x=="NaN",NA,.x)))
```

```{r}
#| label: fig-traitsinTRY
#| fig-cap: "% of our species for which we have a value."
try_release%>%
  reshape2::melt(id.vars=c("species"))%>%
  group_by(variable)%>%
  mutate(is_na_var=ifelse(is.na(value),0,1))%>%
  summarise(pct_species_avail=(sum(is_na_var)/82)*100)%>%
  ggplot(aes(x=pct_species_avail,y=variable))+
  geom_point()+
  theme_minimal()
```

Write the list of traits to a new file.

```{r}
try_release%>%
  reshape2::melt(id.vars=c("species"))%>%
  group_by(variable)%>%
  mutate(is_na_var=ifelse(is.na(value),0,1))%>%
  summarise(pct_species_avail=(sum(is_na_var)/82)*100)%>%
  filter(pct_species_avail>0)%>%
  readr::write_tsv("data/TRY/release/traits_with_some_values.tsv")
```

## Macroscopy

#### Protocols

#### Image processing

#### Traitor results

```{r}
# load data
traitor_output <- read.csv("data/intermediary_outs/G0/objects_measurements.csv")
  
# extract species information
traitor_output%<>%
  mutate(species=gsub("_\\d*","",group)) #remove the _digit end of group
  
  
colnames(traitor_output)

# perfom PCA  
pca_tmp <- traitor_output %>% 
  dplyr::select(all_of(c(5:11,157)))%>%
  FactoMineR::PCA(scale.unit = T,
                  graph = F,
                  quali.sup=8)

eig <- pca_tmp$eig
coord_pca <- as.data.frame(pca_tmp$ind$coord)

arrowMul <- function(arrows, data, at = c(0, 0), fill = 0.75) {
  u <- c(range(data[,1], range(data[,2])))
  u <- u - rep(at, each = 2)
  r <- c(range(arrows[, 1], na.rm = TRUE), range(arrows[, 2], na.rm = TRUE))
  rev <- sign(diff(u))[-2]
  if (rev[1] < 0)
    u[1:2] <- u[2:1]
  if (rev[2] < 0)
    u[3:4] <- u[4:3]
  u <- u/r
  u <- u[is.finite(u) & u > 0]
  fill * min(u)
}

coord_pca$species <- traitor_output$species  
mul <- arrowMul(as.data.frame(pca_tmp$var$coord),
                pca_tmp$ind$coord)


  
pca_traitor <- ggplot()+
  geom_point(coord_pca,mapping=aes(x=Dim.1,y=Dim.2,color=species))+
  ggpubr::theme_classic2()+
  geom_vline(xintercept = 0,lty=2)+
  geom_hline(yintercept = 0,lty=2)+
  xlab(paste0("PC1 (",round(eig[1,2],2),"%)"))+
  ylab(paste0("PC2 (",round(eig[2,2],2),"%)"))+
  geom_segment(data= as.data.frame(pca_tmp$var$coord),aes(x = 0, y = 0, xend=mul*Dim.1, yend=mul*Dim.2),
               lineend = "round", 
               linejoin = "round",
               linewidth = .75, 
               arrow = arrow(length = unit(0.2, "inches")),
               colour = "black" )+
  ggrepel::geom_text_repel(data = data.frame(var_names=rownames(pca_tmp$var$coord),pca_tmp$var$coord*mul), # add variable names at the end of arrows
                           aes(x = Dim.1*1.2, # nudge a bit the coordinates so that they're not on the arrows
                               y = Dim.2*1.2,
                               label = var_names),
                           max.overlaps = getOption("ggrepel.max.overlaps", default = 15))+
  # scale_color_manual(values = climate_palette,name="Climatic zone")+
  theme(text=element_text(face="bold"))+
     guides(color = guide_legend(override.aes = list(size = 3) ) )

scree_plot_var_list <- factoextra::fviz_screeplot(pca_tmp,barfill = "lightgrey", barcolor="lightgrey")+
  geom_hline(yintercept = 100/(length(5:11)+1),color="red",lty=2)+
  ggpubr::theme_classic2()+
  theme(text=element_text(face="bold"),
        plot.title = element_blank())+
  scale_y_continuous(expand=c(0,0))

pca_site_var+scree_plot_var_list
```

## Tomography

## Picnometry

## Mass measruements

# P1

Visualise measured traits

```{r}
source("CredentialsAndSecurity/Cryption.R")
# Load crypting key and credentials
load("CredentialsAndSecurity/key.RData")
credentials <- read.aes(filename = "CredentialsAndSecurity/credentials.txt",key = key)

# Download file from the cloud
# Should be run once or when the file is updated
# webdav::webdav_download_file(
#   "https://nextcloud.inrae.fr/remote.php/dav/files/tlafontrapn",  #next cloud webdav adress
#   file_path = "INHERSEED/monitoring_and_info.xlsx", #path to the file I want to dl
#   destination_path = "test2beignored/data", #path to the local folder
#   username = credentials$login, #credentials created beforehand
#   password = credentials$password,
#   verbose = TRUE
# )
# webdav::webdav_download_file(
#   "https://nextcloud.inrae.fr/remote.php/dav/files/tlafontrapn",  #next cloud webdav adress
#   file_path = "INHERSEED/phenotype.xlsx", #path to the file I want to dl
#   destination_path = "data/raw_inputs/P1/phenotyping", #path to the local folder
#   username = credentials$login, #credentials created beforehand
#   password = credentials$password,
#   verbose = TRUE
# )

```

```{r}
# Load data
data_phenotype <- readxl::read_xlsx("data/raw_inputs/P1/phenotyping/phenotype.xlsx")

data_phenotype%>%
  select(-type_of_leaf)%>%
  reshape2::melt(id=c("sampling_date","common_name","eppo_code","plant_number","leaf_id","plant_id","sample_id"))%>%
  ggplot(aes(x=common_name,y=value))+
  geom_boxplot()+
  theme(axis.text.x=element_text(angle=45,vjust=1,hjust=1))+
  facet_wrap(~variable,scales="free_y")
```

## Leaf area

### Check for images properties

```{r}
# get all images files
path <- list.files("data/raw_inputs/P1/leaves_pictures/allpics/",recursive=T)

# extract date they were taken on
image_info <- exiftoolr::exif_read(paste0("data/raw_inputs/P1/leaves_pictures/allpics/",path),tags = "CreateDate")

# get date, dispatch in batches and set new folder names
image_info%<>%
  mutate(pic_day=as.factor(stringr::str_extract(CreateDate,".*(?=\\s)")))%>%
  mutate(batch=paste0("batch_",as.integer(pic_day)))%>%
  mutate(folder=paste0("data/raw_inputs/P1/leaves_pictures/allpics/",batch),
         file_name=basename(SourceFile))%>%
  mutate(new_path=paste0(folder,"/",file_name))

# creating the directories
image_info$folder %>%
  unique() %>%
  map(
  ~dir.create(.x)
  )

# move all images in folders according to batch ID (i.e., date taken)
walk2(image_info$SourceFile, image_info$new_path, ~file.rename(.x, .y))
```

# G1

# P2
